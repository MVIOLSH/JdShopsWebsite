@page "/shopDetails/{id}"
@using System.Net
@using Bunit.Extensions
@using Flurl
@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.IO
@using System.Security.Permissions
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore.Migrations

@inject HttpClient Http
@inject NavigationManager navMan

<h3><center>ShopDetails</center></h3>


@if (shops == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var shop in shops)
    {

        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th>Shop Number</th>
                    <th>Facia</th>
                    <th>Town</th>
                    <th>Phone Number</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="width: 20%; font-weight: bold">@shop.ShopNumber</td>
                    <td style="width: 20%"><img src="logos/@(shop.Facia + ".png")" alt="@shop.Facia" width="110px" height="60px" /></td>
                    <td style="width: 40%; font-weight: bold">@shop.Town</td>
                    <td><button class="btn btn-primary" a href="tel:@shop.PhoneNumber">Call the shop on @shop.PhoneNumber</button></td>
                </tr>
            </tbody>
        </table>
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th>Delivery Info</th>
                    <th>Longitude</th>
                    <th>Latitude</th>
                    <th>Show on google maps</th>

                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="width: 40%">@shop.DeliveryInfo</td>
                    <td style="width: 20%">@shop.MapCoordinatesLongitude</td>
                    <td style="width: 20%">@shop.MapCoordinatesLatitude</td>
                    <td><a href="http://www.google.com/maps/place/@shop.MapCoordinatesLatitude,@shop.MapCoordinatesLongitude" target="_blank"><button class="btn btn-primary">Go to map</button></a></td>
                </tr>
            </tbody>
        </table>

        @if (!listOfShopImages.IsNullOrEmpty())
        {

            <table class="table table-striped">
                <thead class="thead-light">
                    <tr>
                        <th>Image</th>
                        <th>Decription</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var img in listOfShopImages)
                    {
                        <tr>
                            <td><img style="max-width: 500px; max-height:500px" src="@GetImg(img.ShopNumber, img.FileName)" /></td>
                            <td>@img.Description</td>
                            <AuthorizeView Roles="Admin, AdvancedUser">
                                <td><button class="btn btn-danger" @onclick="@(()=>DeletePictureShop(img.Id))">Delete Picture</button></td>
                            </AuthorizeView>
                        </tr>
                    }
                    <AuthorizeView Roles="Admin, AdvancedUser">
                        <tr><button class="btn btn-secondary" style="margin-top:10px" @onclick="NavigateToImageUpload(shop.ShopNumber)">Upload New Picture</button></tr>
                    </AuthorizeView>
                </tbody>
            </table>

            <br />
        }

        <br />
        <button class="btn btn-primary" style="margin: 5px" @onclick="@(() => AddRequest(id))">Request Change</button>
        <AuthorizeView Roles="Admin, AdvancedUser">
            <button class="btn btn-primary" style="margin: 5px" @onclick="@(() => EditShop
                                                                            (shop.ShopNumber, shop.Facia, shop.DeliveryInfo,shop.MapCoordinatesLongitude, shop.MapCoordinatesLatitude, shop.Id, shop.PhoneNumber, shop.Town))">
                Edit Shop Details
            </button>
            <button class="btn btn-secondary" style="margin: 5px" @onclick="@(() => DeleteShop
                                                                              (shop.ShopNumber))">
                Delete Shop
            </button>
        </AuthorizeView>

        <br />




        @if (!addAddresses.IsNullOrEmpty())
        {

            foreach (var address in addAddresses)
            {
                <br />
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th>Additional address for @address.Description</th>

                        </tr>
                        <tr>
                            <th>Delivery Info</th>
                            <th>Longitude</th>
                            <th>Latitude</th>
                            <th>Show on google maps</th>
                            <AuthorizeView Roles="Admin, AdvancedUser">
                                <th>Edit</th>
                                <th>Delete</th>
                            </AuthorizeView>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="width: 40%">@address.DeliveryInfo</td>
                            <td style="width: 15%">@address.MapCoordinatesLongitude</td>
                            <td style="width: 15%">@address.MapCoordinatesLatitude</td>
                            <td><a href="http://www.google.com/maps/place/{@address.MapCoordinatesLatitude},@address.MapCoordinatesLongitude" target="_blank"><button class="btn btn-primary">Go to map</button></a></td>
                            <AuthorizeView Roles="Admin, AdvancedUser">
                                <td>
                                    <button class="btn btn-primary" @onclick="@(() => EditAddAddress(address.ShopNumber,
                                                                              address.Description, address.DeliveryInfo,
                                                                              address.MapCoordinatesLongitude, address.MapCoordinatesLatitude, address.Id))">
                                        Edit
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-secondary" @onclick="@(() => DeleteAddAddress(address.ShopNumber,
                                                                                address.Description, address.DeliveryInfo,
                                                                                address.MapCoordinatesLongitude, address.MapCoordinatesLatitude, address.Id))">
                                        Delete
                                    </button>
                                </td>
                            </AuthorizeView>
                        </tr>

                    </tbody>
                </table>


            }
        }

    }
    <AuthorizeView Roles="Admin, AdvancedUser">
        <button class="btn btn-primary" @onclick="@(() => AddAddAddress(id))">
            Add Additional Delivery Address
        </button>
    </AuthorizeView>
}


@code
{
    [Parameter]
    public string id { get; set; }

    public List<ShopDto> shops { get; set; }
    public List<AdditionalAddreessesDto> addAddresses { get; set; }
    public string imgurl { get; set; }
    public List<ImgShop> listOfShopImages { get; set; }
    //@(()=>UploadPictureToShop(shop.ShopNumber))

    public async void DeletePictureShop(int id)
    {
        var url = Url.Combine("https://jdshops-api-app.azurewebsites.net/api/images/", id.ToString());
        await Http.DeleteAsync(url);

    }

    public void NavigateToImageUpload(float shopNumber)
    {
        var url = Url.Combine("/images", shopNumber.ToString);
        navMan.NavigateTo(url, true);
    }

    protected override async Task OnInitializedAsync()
    {
        var url = Url.Combine("https://jdshops-api-app.azurewebsites.net/api/shops/", id.ToString());
        shops = await Http.GetFromJsonAsync<List<ShopDto>>(url);
        var url2 = Url.Combine("https://jdshops-api-app.azurewebsites.net/api/shops/", id.ToString(), "/additional");
        addAddresses = await Http.GetFromJsonAsync<List<AdditionalAddreessesDto>>(url2);
        imgurl = id.ToString() + ".jpg";

        var url3 = Url.Combine("https://jdshops-api-app.azurewebsites.net/api/images", id.ToString());
        listOfShopImages = await Http.GetFromJsonAsync<List<ImgShop>>(url3);
    }

    public Object GetImg(string shopNumber, string filename)
    {
        var url = Url.Combine("https://jdshops-api-app.azurewebsites.net/api/images", shopNumber, filename);
        //var img = Http.GetStreamAsync(url);
        return url;
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    async void EditAddAddress(float shopNumber, string description, string deliveryInfo, string longitude, string latitude, int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdditionalAddreessesDto.ShopNumber), shopNumber);
        parameters.Add(nameof(AdditionalAddreessesDto.Description), description);
        parameters.Add(nameof(AdditionalAddreessesDto.DeliveryInfo), deliveryInfo);
        parameters.Add(nameof(AdditionalAddreessesDto.MapCoordinatesLongitude), longitude);
        parameters.Add(nameof(AdditionalAddreessesDto.MapCoordinatesLatitude), latitude);
        parameters.Add(nameof(AdditionalAddreessesDto.Id), id);

        var modal = Modal.Show<EditAddAddressComponent>("Edit Additional Address", parameters);

    }

    void DeleteAddAddress(float shopNumber, string description, string deliveryInfo, string longitude, string latitude, int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdditionalAddreessesDto.ShopNumber), shopNumber);
        parameters.Add(nameof(AdditionalAddreessesDto.Description), description);
        parameters.Add(nameof(AdditionalAddreessesDto.DeliveryInfo), deliveryInfo);
        parameters.Add(nameof(AdditionalAddreessesDto.MapCoordinatesLongitude), longitude);
        parameters.Add(nameof(AdditionalAddreessesDto.MapCoordinatesLatitude), latitude);
        parameters.Add(nameof(AdditionalAddreessesDto.Id), id);

        Modal.Show<DeleteAddAddressComponent>("Delete Address", parameters);

    }

    void AddAddAddress(string id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdditionalAddreessesDto.ShopNumber), float.Parse(id));

        Modal.Show<AddAddAddressComponent>("Add Address", parameters);
    }

    void AddRequest(string id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(TicketDto.ShopNumber), id);

        Modal.Show<AddRequestComponent>("Add Request", parameters);
    }

    void EditShop(float shopNumber, string facia, string deliveryInfo, string longitude, string latitude, int id, string phoneNumber, string town)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ShopDto.ShopNumber), shopNumber);
        parameters.Add(nameof(ShopDto.Facia), facia);
        parameters.Add(nameof(ShopDto.DeliveryInfo), deliveryInfo);
        parameters.Add(nameof(ShopDto.MapCoordinatesLongitude), longitude);
        parameters.Add(nameof(ShopDto.MapCoordinatesLatitude), latitude);
        parameters.Add(nameof(ShopDto.Id), id);
        parameters.Add(nameof(ShopDto.PhoneNumber), phoneNumber);
        parameters.Add(nameof(ShopDto.Town), town);

        var window = Modal.Show<EditShopComponent>("Edit Address", parameters);

    }

    void DeleteShop(float shopNumber)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ShopDto.ShopNumber), shopNumber);

        Modal.Show<DeleteShopComponent>("Delete Shop", parameters);

    }

    void UploadPictureToShop(float shopNumber)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ImgShop.ShopNumber), shopNumber);

        Modal.Show<UploadPictureShopComponent>("Upload Picture Shop", parameters);
    }
}












