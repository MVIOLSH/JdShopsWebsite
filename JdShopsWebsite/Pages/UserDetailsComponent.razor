@page "/userDetails/{id}"
@using System.Net
@using Bunit.Extensions
@using Flurl
@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.IO
@using System.Security.Permissions
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore.Migrations

@inject HttpClient Http
@inject NavigationManager navMan

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var user in users)
    {
        <table class="table table-striped">
            <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th>Active Account</th>
                <th>Role</th>
                <th>Role ID</th>
                <th>Edit User Details</th>
            </tr>
            </thead>
            <tbody>

            <tr>
                <td>@user.Id</td>
                <td>@user.Fname</td>
                <td>@user.Lname</td>
                <td>@user.Email</td>
                <td>@user.IsValidated</td>
                <td>@user.Role</td>
                <td>@user.RoleId</td>
                <td><button class="btn btn-primary" style="margin: 5px" @onclick="@(() => EditUser(@user.Fname, @user.Lname, @user.Role, @user.Email, @user.RoleId, @user.Id, @user.IsValidated))">Edit User</button></td>
            </tr>

            </tbody>
        </table>
        <button class="btn btn-success" @onclick="(() => ResetPass(user.Id.ToString()))">Reset Password</button>
        <button class="btn btn-danger" @onclick="(() => DeleteUser(user.Email, user.Id))">Delete User</button>
    }
}


@code
{
    [Parameter]
    public string id { get; set; }

    public List<Shared.Users> users { get; set; }

    protected override void OnParametersSet()
    {

        var test = id;

    }

    protected override async Task OnInitializedAsync()
    {
        var url = Url.Combine("https://jdshopsapi.szymanski.uk/api/account/users/", id.ToString());
        users = await Http.GetFromJsonAsync<List<Shared.Users>>(url);
    }


    [CascadingParameter] public IModalService Modal { get; set; }

    async void EditUser(string fName, string lName, string Role, string email, int roleid, int id, bool isValidated)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Shared.Users.Id), id);
        parameters.Add(nameof(Shared.Users.Fname), fName);
        parameters.Add(nameof(Shared.Users.Lname), lName);
        parameters.Add(nameof(Shared.Users.Role), Role);
        parameters.Add(nameof(Shared.Users.RoleId), roleid);
        parameters.Add(nameof(Shared.Users.Email), email);
        parameters.Add(nameof(Shared.Users.IsValidated), isValidated);

        var modal = Modal.Show<EditUserComponent>("Edit User Details", parameters);

    }

    void DeleteUser(string Email, int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(User.Id), id);
        parameters.Add(nameof(User.Email), Email);
       

        Modal.Show<DeleteUserComponent>("Delete User", parameters);

    }

    void ResetPass(string id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(User.Id), int.Parse(id));

        Modal.Show<ResetUserPaswordComponent>("Reset Password", parameters);
    }

}


